             +--------------------------+
             | CSCC69                   |
             | PROJECT 2: USER PROGRAMS	|
             | DESIGN DOCUMENT          |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
    struct semaphore load;  // notification of successful loading
    bool success_load;      // true on successful loading

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In `process_execute`, we copy the command line to another page. We construct
argv[] behind the copied content in the same page. After that, we split the
command line by space. In case of multiple spaces between arguments, we
removes spaces at the start position of an argument. And at the same time, we
assign the start position of every argument to argv[].

So far, we assume that the size of arguments is less then the size of a page.
We use `ASSERT` to throw a panic if arguments overflows. It works well, and
passes all tests, but maybe we should allocate and install a new page in case
of overflow.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

`strtok_r` is reentrant. It can be called from multiple threads, and it can 
also be used to parse multiple strings at once.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. It simplifies implementation of the kernel.
2. It allows shell for checking invalid arguments.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

A "file_dp" is a struct used for mapping from fd to `struct file`.

    // file descriptor struct
    struct file_dp {
      int fd;                // file descriptor
      struct file* f;        // file struct used by filesys
      struct list_elem elem; // list elem for thread.fds
    };

Added to struct thread:
    tid_t parent;           // tid of parent
    struct semaphore sem;   // notification of exit  (sended by child)
    struct semaphore exit;  // notification of exit  (sended by parent)
    int ret;                // return value
    struct list fds;        // file descriptor opened by this thread (process)
    int next_fd;            // next fd assigned to `open`


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique just within a single process. Each process
has its own fd counter (`next_fd`). We use a `file_dp` to record  a pair 
of fd and opened file. The `file_dp` is inserted into the `fds` list, so
that given a fd, we can find the `struct file` by searching the list.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We writes two function to check access of user memory:
    `check_user_addr_area(addr, size)` will check the range [addr, addr + size)
    is valid.
    `check_user_str(s)` using  check_user_addr_area to check the memory used by
    `s` is valid.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

If the space spans two pages, it would need 2 calls to `pagedir_get_page`.
2 bytes have the same result as 4096 bytes.
There is no way for improvement.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When a parent calls wait, it would wait on the child->sema util the child calls
sema_up.
After that, the parent calls sema_up on C->exit to allow the child to exit.
And we will modify the child's parent tid to -1 at the first time call of wait, so that
another call of wait will just return -1.

    process_wait(C):
        sema_down(C->sema)
        sema_up(C->exit)

    process_exit(C):
        sema_up(C->sema);
        sema_down(C->exit);


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We use separated function to check the validity of user-specified addresses.
When we find invalid addresses, we call thread_exit and process_exit to release
all allocated resources. And all functions are responsible for their owen resources.
If an error occurs inside a function, the function would release all resources
allocated by it.

Lets say a user process calls write with a buffer size of 20, where the
pointer to the tenth byte is invalid. We use `check_user_addr_area` to 
check if the range [buf, buf+20) is valid. `check_user_addr_area` finds
invalidity, and it will set the exit status to -1 and call `thread_exit`.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

I use a semaphore to ensure this. The caller of `exec` will call
sema_down on the semaphore after it calls `process_execute`.
And the child process will set `success_load` in its thread field,
and call sema_up on the semaphore.
The parent can get the status of loading by reading `success_load`.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

There are two semaphores to help communication between P and C:
    process_wait(C):
        sema_down(C->sema)
        sema_up(C->exit)

    process_exit(C):
        sema_up(C->sema);
        sema_down(C->exit);

If P call wait(C) before C exits, P will wait util C exits;
And C cannot exit before P call wait(C), C will wait for C->exit.

C will not exit if P terminates without waiting. Maybe we can use idle thread
to find orphans and cleanup them.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It is simpler than causing a page fault.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The fd just increments every time we opens a new file. It minimizes usage of
memory (comparing with recording every free fd) and simplifies implementation.
However, the number of opened file is limited by the size of fd.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

No. Because Pintos do not support multithreaded processes, making tid and pid
the same simplifies our implementation.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
